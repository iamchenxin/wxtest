{"version":3,"sources":["utils/fs.js"],"names":["node_fs","require","mustNot","pro","FS","constructor","u_ori_fs","encode","ori_fs","_ori_fs","_writeFile","writeFile","setEncode","old","readFile","file","option","Promise","resolve","reject","err","data","fs","module","exports"],"mappings":";;AAEA;;AAEA,MAAMA,UAAUC,QAAQ,IAAR,CAAhB;;AACA,MAAM,EAACC,OAAD,KAAYD,QAAQ,cAAR,EAAwBE,GAA1C;AACA;AACA;;AAEA,MAAMC,EAAN,CAAS;AASPC,cAAYC,QAAZ,EAAsCC,MAAtC,EAAuD;AACrD,UAAMC,SAASN,QAAQ,IAAR,EAAcI,QAAd,EAAwB,YAAxB,CAAf;AACA,SAAKC,MAAL,GAAcA,SAASA,MAAT,GAAkB,IAAhC;AACA,SAAKE,OAAL,GAAeD,MAAf;;AAEA,SAAKE,UAAL,GAAkB,4BAAcF,OAAOG,SAArB,CAAlB;AACD;;AAEDC,YAAUL,MAAV,EAAuC;AACrC,UAAMM,MAAM,KAAKN,MAAjB;AACA,SAAKA,MAAL,GAAcA,MAAd;AACA,WAAOM,GAAP;AACD;;AAEDC,WAAUC,IAAV,EACAC,MADA,EACgD;AAC9CA,aAAS,KAAKT,MAAL,GAAc,KAAKA,MAAnB,GAA4BS,MAArC;AACA,WAAO,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKV,OAAL,CAAaK,QAAb,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC,CAACI,GAAD,EAAMC,IAAN,KAAe;AACjD,YAAID,GAAJ,EAAS;AACPD,iBAAOC,GAAP;AACD,SAFD,MAEO;AACLF,kBAAQG,IAAR;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAEDV,YAAWI,IAAX,EAAuCM,IAAvC,EACAL,MADA,EACiD;AAC/CA,aAAS,KAAKT,MAAL,GAAc,KAAKA,MAAnB,GAA4BS,MAArC;AACA,WAAO,KAAKN,UAAL,CAAgBK,IAAhB,EAAsBM,IAAtB,EAA4BL,MAA5B,CAAP;AACD;;AAzCM;;AA6CT,MAAMM,KAAK,IAAIlB,EAAJ,CAAOJ,OAAP,CAAX;;AAEAuB,OAAOC,OAAP,GAAiB;AACfF,MAAIA,EADW;AAEflB,MAAIA;AAFW,CAAjB","file":"fs.js","sourcesContent":["// @flow\n\nimport { promisify1arg } from './promise.js';\n\nconst node_fs = require('fs');\nconst {mustNot} = require('flow-dynamic').pro;\n//const path = require('path');\n//import {RepoFileError} from './error.js';\n\nclass FS {\n  _ori_fs: typeof node_fs;\n  encode: string|null;\n  readFile: ( file: string|Buffer|number, option?: Object|string )\n    => Promise<string|Buffer>;\n  writeFile: ( file: string|Buffer|number, data: string|Buffer,\n    option?: Object|string ) => Promise<string|Buffer>;\n  _writeFile: ( file: string|Buffer|number, data: string|Buffer,\n    option?: Object|string ) => Promise<string|Buffer>;\n  constructor(u_ori_fs: typeof node_fs, encode?: string) {\n    const ori_fs = mustNot(null, u_ori_fs, 'invalid fs');\n    this.encode = encode ? encode : null;\n    this._ori_fs = ori_fs;\n\n    this._writeFile = promisify1arg(ori_fs.writeFile);\n  }\n\n  setEncode(encode: string): string|null {\n    const old = this.encode;\n    this.encode = encode;\n    return old;\n  }\n\n  readFile( file: string|Buffer|number,\n  option?: Object|string): Promise<string|Buffer> {\n    option = this.encode ? this.encode : option;\n    return new Promise( (resolve, reject) => {\n      this._ori_fs.readFile(file, option, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  writeFile( file: string|Buffer|number, data: string|Buffer,\n  option?: Object|string ): Promise<string|Buffer> {\n    option = this.encode ? this.encode : option;\n    return this._writeFile(file, data, option);\n  }\n\n}\n\nconst fs = new FS(node_fs);\n\nmodule.exports = {\n  fs: fs,\n  FS: FS,\n};\n"],"sourceRoot":"/home/iamchenxin/project/workout/wxtest/src"}