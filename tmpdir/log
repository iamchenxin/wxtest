req:
_readableState:<br/>
 ReadableState {
  objectMode: false,
  highWaterMark: 16384,
  buffer: BufferList { head: null, tail: null, length: 0 },
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: null,
  ended: false,
  endEmitted: false,
  reading: false,
  sync: true,
  needReadable: false,
  emittedReadable: false,
  readableListening: false,
  resumeScheduled: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: true,
  decoder: null,
  encoding: null }


<br/>
readable:<br/>
 true


<br/>
domain:<br/>
 null


<br/>
_events:<br/>
 {}


<br/>
_eventsCount:<br/>
 0


<br/>
_maxListeners:<br/>
 undefined


<br/>
socket:<br/>
 Socket {
  connecting: false,
  _hadError: false,
  _handle: 
   TCP {
     bytesRead: 386,
     _externalStream: {},
     fd: 13,
     reading: true,
     owner: [Circular],
     onread: [Function: onread],
     onconnection: null,
     writeQueueSize: 0 },
  _parent: null,
  _host: null,
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: 
   { end: 
      [ { [Function: g] listener: [Function: onend] },
        [Function: socketOnEnd] ],
     finish: [Function: onSocketFinish],
     _socketEnd: [Function: onSocketEnd],
     drain: [ [Function: ondrain], [Function: socketOnDrain] ],
     timeout: [Function],
     error: [Function: socketOnError],
     close: 
      [ [Function: serverSocketCloseListener],
        [Function: onServerResponseClose] ],
     data: [Function: socketOnData],
     resume: [Function: onSocketResume],
     pause: [Function: onSocketPause] },
  _eventsCount: 10,
  _maxListeners: undefined,
  _writableState: 
   WritableState {
     objectMode: false,
     highWaterMark: 16384,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     corked: 0,
     sync: false,
     bufferProcessing: false,
     onwrite: [Function],
     writecb: null,
     writelen: 0,
     bufferedRequest: null,
     lastBufferedRequest: null,
     pendingcb: 1,
     prefinished: false,
     errorEmitted: false,
     bufferedRequestCount: 0,
     corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
  writable: true,
  allowHalfOpen: true,
  destroyed: false,
  _bytesDispatched: 149,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: 
   Server {
     domain: null,
     _events: 
      { request: 
         { [Function: app]
           domain: undefined,
           _events: { mount: [Function: onmount] },
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames],
           init: [Function: init],
           defaultConfiguration: [Function: defaultConfiguration],
           lazyrouter: [Function: lazyrouter],
           handle: [Function: handle],
           use: [Function: use],
           route: [Function: route],
           engine: [Function: engine],
           param: [Function: param],
           set: [Function: set],
           path: [Function: path],
           enabled: [Function: enabled],
           disabled: [Function: disabled],
           enable: [Function: enable],
           disable: [Function: disable],
           acl: [Function],
           bind: [Function],
           checkout: [Function],
           connect: [Function],
           copy: [Function],
           delete: [Function],
           get: [Function],
           head: [Function],
           link: [Function],
           lock: [Function],
           'm-search': [Function],
           merge: [Function],
           mkactivity: [Function],
           mkcalendar: [Function],
           mkcol: [Function],
           move: [Function],
           notify: [Function],
           options: [Function],
           patch: [Function],
           post: [Function],
           propfind: [Function],
           proppatch: [Function],
           purge: [Function],
           put: [Function],
           rebind: [Function],
           report: [Function],
           search: [Function],
           subscribe: [Function],
           trace: [Function],
           unbind: [Function],
           unlink: [Function],
           unlock: [Function],
           unsubscribe: [Function],
           all: [Function: all],
           del: [Function],
           render: [Function: render],
           listen: [Function: listen],
           request: IncomingMessage { app: [Circular] },
           response: ServerResponse { app: [Circular] },
           cache: {},
           engines: {},
           settings: 
            { 'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: wetag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/iamchenxin/project/workout/wxtest/views',
              'jsonp callback name': 'callback' },
           _eventsCount: 1,
           locals: 
            { settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' } },
           mountpath: '/',
           _router: 
            { [Function: router]
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: 
               [ Layer {
                   handle: [Function: query],
                   name: 'query',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: expressInit],
                   name: 'expressInit',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: {},
                   path: '/',
                   keys: [],
                   regexp: /^\/?$/i,
                   route: 
                    Route {
                      path: '/',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/log\/?$/i,
                   route: 
                    Route {
                      path: '/log',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } } ] } },
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle: 
      TCP {
        bytesRead: 0,
        _externalStream: {},
        fd: 11,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _pendingResponseData: 0,
     _connectionKey: '6::::18801' },
  _server: 
   Server {
     domain: null,
     _events: 
      { request: 
         { [Function: app]
           domain: undefined,
           _events: { mount: [Function: onmount] },
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames],
           init: [Function: init],
           defaultConfiguration: [Function: defaultConfiguration],
           lazyrouter: [Function: lazyrouter],
           handle: [Function: handle],
           use: [Function: use],
           route: [Function: route],
           engine: [Function: engine],
           param: [Function: param],
           set: [Function: set],
           path: [Function: path],
           enabled: [Function: enabled],
           disabled: [Function: disabled],
           enable: [Function: enable],
           disable: [Function: disable],
           acl: [Function],
           bind: [Function],
           checkout: [Function],
           connect: [Function],
           copy: [Function],
           delete: [Function],
           get: [Function],
           head: [Function],
           link: [Function],
           lock: [Function],
           'm-search': [Function],
           merge: [Function],
           mkactivity: [Function],
           mkcalendar: [Function],
           mkcol: [Function],
           move: [Function],
           notify: [Function],
           options: [Function],
           patch: [Function],
           post: [Function],
           propfind: [Function],
           proppatch: [Function],
           purge: [Function],
           put: [Function],
           rebind: [Function],
           report: [Function],
           search: [Function],
           subscribe: [Function],
           trace: [Function],
           unbind: [Function],
           unlink: [Function],
           unlock: [Function],
           unsubscribe: [Function],
           all: [Function: all],
           del: [Function],
           render: [Function: render],
           listen: [Function: listen],
           request: IncomingMessage { app: [Circular] },
           response: ServerResponse { app: [Circular] },
           cache: {},
           engines: {},
           settings: 
            { 'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: wetag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/iamchenxin/project/workout/wxtest/views',
              'jsonp callback name': 'callback' },
           _eventsCount: 1,
           locals: 
            { settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' } },
           mountpath: '/',
           _router: 
            { [Function: router]
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: 
               [ Layer {
                   handle: [Function: query],
                   name: 'query',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: expressInit],
                   name: 'expressInit',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: {},
                   path: '/',
                   keys: [],
                   regexp: /^\/?$/i,
                   route: 
                    Route {
                      path: '/',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/log\/?$/i,
                   route: 
                    Route {
                      path: '/log',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } } ] } },
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle: 
      TCP {
        bytesRead: 0,
        _externalStream: {},
        fd: 11,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _pendingResponseData: 0,
     _connectionKey: '6::::18801' },
  _idleTimeout: 120000,
  _idleNext: 
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000 },
  _idlePrev: 
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000 },
  _idleStart: 4116,
  parser: 
   HTTPParser {
     '0': [Function: parserOnHeaders],
     '1': [Function: parserOnHeadersComplete],
     '2': [Function: parserOnBody],
     '3': [Function: parserOnMessageComplete],
     '4': [Function: onParserExecute],
     _headers: [],
     _url: '',
     _consumed: true,
     socket: [Circular],
     incoming: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { connection: 'upgrade',
           'x-forwarded-for': '127.0.0.1',
           host: 'wx1.z.cc',
           'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'accept-language': 'en-US,en;q=0.5',
           'accept-encoding': 'gzip, deflate',
           'upgrade-insecure-requests': '1',
           'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
        rawHeaders: 
         [ 'Connection',
           'upgrade',
           'X-Forwarded-For',
           '127.0.0.1',
           'Host',
           'wx1.z.cc',
           'User-Agent',
           'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           'Accept',
           'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'Accept-Language',
           'en-US,en;q=0.5',
           'Accept-Encoding',
           'gzip, deflate',
           'Upgrade-Insecure-Requests',
           '1',
           'If-None-Match',
           'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/',
        _parsedUrl: 
         Url {
           protocol: null,
           slashes: null,
           auth: null,
           host: null,
           port: null,
           hostname: null,
           hash: null,
           search: null,
           query: null,
           pathname: '/',
           path: '/',
           href: '/',
           _raw: '/' },
        params: {},
        query: {},
        res: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedHeader: { 'content-length': true, 'transfer-encoding': true },
           _contentLength: 0,
           _hasBody: false,
           _trailer: '',
           finished: true,
           _headerSent: true,
           socket: [Circular],
           connection: [Circular],
           _header: 'HTTP/1.1 304 Not Modified\r\nX-Powered-By: Express\r\nETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"\r\nDate: Sun, 27 Nov 2016 10:13:10 GMT\r\nConnection: keep-alive\r\n\r\n',
           _headers: 
            { 'x-powered-by': 'Express',
              etag: 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
           _headerNames: { 'x-powered-by': 'X-Powered-By', etag: 'ETag' },
           _onPendingData: [Function: updateOutgoingData],
           req: [Circular],
           locals: {},
           statusCode: 304,
           statusMessage: 'Not Modified' },
        route: 
         Route {
           path: '/',
           stack: 
            [ Layer {
                handle: [Function],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i,
                method: 'get' } ],
           methods: { get: true } } },
     outgoing: null,
     maxHeaderPairs: 2000,
     onIncoming: [Function: parserOnIncoming] },
  on: [Function: socketOnWrap],
  _paused: false,
  read: [Function],
  _consuming: true,
  _httpMessage: 
   ServerResponse {
     domain: null,
     _events: { finish: [Function: resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: { 'content-length': true, 'transfer-encoding': true },
     _contentLength: 0,
     _hasBody: false,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket: [Circular],
     connection: [Circular],
     _header: 'HTTP/1.1 304 Not Modified\r\nX-Powered-By: Express\r\nETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"\r\nDate: Sun, 27 Nov 2016 10:13:10 GMT\r\nConnection: keep-alive\r\n\r\n',
     _headers: 
      { 'x-powered-by': 'Express',
        etag: 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
     _headerNames: { 'x-powered-by': 'X-Powered-By', etag: 'ETag' },
     _onPendingData: [Function: updateOutgoingData],
     req: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { connection: 'upgrade',
           'x-forwarded-for': '127.0.0.1',
           host: 'wx1.z.cc',
           'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'accept-language': 'en-US,en;q=0.5',
           'accept-encoding': 'gzip, deflate',
           'upgrade-insecure-requests': '1',
           'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
        rawHeaders: 
         [ 'Connection',
           'upgrade',
           'X-Forwarded-For',
           '127.0.0.1',
           'Host',
           'wx1.z.cc',
           'User-Agent',
           'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           'Accept',
           'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'Accept-Language',
           'en-US,en;q=0.5',
           'Accept-Encoding',
           'gzip, deflate',
           'Upgrade-Insecure-Requests',
           '1',
           'If-None-Match',
           'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/',
        _parsedUrl: 
         Url {
           protocol: null,
           slashes: null,
           auth: null,
           host: null,
           port: null,
           hostname: null,
           hash: null,
           search: null,
           query: null,
           pathname: '/',
           path: '/',
           href: '/',
           _raw: '/' },
        params: {},
        query: {},
        res: [Circular],
        route: 
         Route {
           path: '/',
           stack: 
            [ Layer {
                handle: [Function],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i,
                method: 'get' } ],
           methods: { get: true } } },
     locals: {},
     statusCode: 304,
     statusMessage: 'Not Modified' } }


<br/>
connection:<br/>
 Socket {
  connecting: false,
  _hadError: false,
  _handle: 
   TCP {
     bytesRead: 386,
     _externalStream: {},
     fd: 13,
     reading: true,
     owner: [Circular],
     onread: [Function: onread],
     onconnection: null,
     writeQueueSize: 0 },
  _parent: null,
  _host: null,
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: 
   { end: 
      [ { [Function: g] listener: [Function: onend] },
        [Function: socketOnEnd] ],
     finish: [Function: onSocketFinish],
     _socketEnd: [Function: onSocketEnd],
     drain: [ [Function: ondrain], [Function: socketOnDrain] ],
     timeout: [Function],
     error: [Function: socketOnError],
     close: 
      [ [Function: serverSocketCloseListener],
        [Function: onServerResponseClose] ],
     data: [Function: socketOnData],
     resume: [Function: onSocketResume],
     pause: [Function: onSocketPause] },
  _eventsCount: 10,
  _maxListeners: undefined,
  _writableState: 
   WritableState {
     objectMode: false,
     highWaterMark: 16384,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     corked: 0,
     sync: false,
     bufferProcessing: false,
     onwrite: [Function],
     writecb: null,
     writelen: 0,
     bufferedRequest: null,
     lastBufferedRequest: null,
     pendingcb: 1,
     prefinished: false,
     errorEmitted: false,
     bufferedRequestCount: 0,
     corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
  writable: true,
  allowHalfOpen: true,
  destroyed: false,
  _bytesDispatched: 149,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: 
   Server {
     domain: null,
     _events: 
      { request: 
         { [Function: app]
           domain: undefined,
           _events: { mount: [Function: onmount] },
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames],
           init: [Function: init],
           defaultConfiguration: [Function: defaultConfiguration],
           lazyrouter: [Function: lazyrouter],
           handle: [Function: handle],
           use: [Function: use],
           route: [Function: route],
           engine: [Function: engine],
           param: [Function: param],
           set: [Function: set],
           path: [Function: path],
           enabled: [Function: enabled],
           disabled: [Function: disabled],
           enable: [Function: enable],
           disable: [Function: disable],
           acl: [Function],
           bind: [Function],
           checkout: [Function],
           connect: [Function],
           copy: [Function],
           delete: [Function],
           get: [Function],
           head: [Function],
           link: [Function],
           lock: [Function],
           'm-search': [Function],
           merge: [Function],
           mkactivity: [Function],
           mkcalendar: [Function],
           mkcol: [Function],
           move: [Function],
           notify: [Function],
           options: [Function],
           patch: [Function],
           post: [Function],
           propfind: [Function],
           proppatch: [Function],
           purge: [Function],
           put: [Function],
           rebind: [Function],
           report: [Function],
           search: [Function],
           subscribe: [Function],
           trace: [Function],
           unbind: [Function],
           unlink: [Function],
           unlock: [Function],
           unsubscribe: [Function],
           all: [Function: all],
           del: [Function],
           render: [Function: render],
           listen: [Function: listen],
           request: IncomingMessage { app: [Circular] },
           response: ServerResponse { app: [Circular] },
           cache: {},
           engines: {},
           settings: 
            { 'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: wetag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/iamchenxin/project/workout/wxtest/views',
              'jsonp callback name': 'callback' },
           _eventsCount: 1,
           locals: 
            { settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' } },
           mountpath: '/',
           _router: 
            { [Function: router]
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: 
               [ Layer {
                   handle: [Function: query],
                   name: 'query',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: expressInit],
                   name: 'expressInit',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: {},
                   path: '/',
                   keys: [],
                   regexp: /^\/?$/i,
                   route: 
                    Route {
                      path: '/',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/log\/?$/i,
                   route: 
                    Route {
                      path: '/log',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } } ] } },
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle: 
      TCP {
        bytesRead: 0,
        _externalStream: {},
        fd: 11,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _pendingResponseData: 0,
     _connectionKey: '6::::18801' },
  _server: 
   Server {
     domain: null,
     _events: 
      { request: 
         { [Function: app]
           domain: undefined,
           _events: { mount: [Function: onmount] },
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames],
           init: [Function: init],
           defaultConfiguration: [Function: defaultConfiguration],
           lazyrouter: [Function: lazyrouter],
           handle: [Function: handle],
           use: [Function: use],
           route: [Function: route],
           engine: [Function: engine],
           param: [Function: param],
           set: [Function: set],
           path: [Function: path],
           enabled: [Function: enabled],
           disabled: [Function: disabled],
           enable: [Function: enable],
           disable: [Function: disable],
           acl: [Function],
           bind: [Function],
           checkout: [Function],
           connect: [Function],
           copy: [Function],
           delete: [Function],
           get: [Function],
           head: [Function],
           link: [Function],
           lock: [Function],
           'm-search': [Function],
           merge: [Function],
           mkactivity: [Function],
           mkcalendar: [Function],
           mkcol: [Function],
           move: [Function],
           notify: [Function],
           options: [Function],
           patch: [Function],
           post: [Function],
           propfind: [Function],
           proppatch: [Function],
           purge: [Function],
           put: [Function],
           rebind: [Function],
           report: [Function],
           search: [Function],
           subscribe: [Function],
           trace: [Function],
           unbind: [Function],
           unlink: [Function],
           unlock: [Function],
           unsubscribe: [Function],
           all: [Function: all],
           del: [Function],
           render: [Function: render],
           listen: [Function: listen],
           request: IncomingMessage { app: [Circular] },
           response: ServerResponse { app: [Circular] },
           cache: {},
           engines: {},
           settings: 
            { 'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: wetag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/iamchenxin/project/workout/wxtest/views',
              'jsonp callback name': 'callback' },
           _eventsCount: 1,
           locals: 
            { settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' } },
           mountpath: '/',
           _router: 
            { [Function: router]
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: 
               [ Layer {
                   handle: [Function: query],
                   name: 'query',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: expressInit],
                   name: 'expressInit',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: {},
                   path: '/',
                   keys: [],
                   regexp: /^\/?$/i,
                   route: 
                    Route {
                      path: '/',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/log\/?$/i,
                   route: 
                    Route {
                      path: '/log',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } } ] } },
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle: 
      TCP {
        bytesRead: 0,
        _externalStream: {},
        fd: 11,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _pendingResponseData: 0,
     _connectionKey: '6::::18801' },
  _idleTimeout: 120000,
  _idleNext: 
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000 },
  _idlePrev: 
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000 },
  _idleStart: 4116,
  parser: 
   HTTPParser {
     '0': [Function: parserOnHeaders],
     '1': [Function: parserOnHeadersComplete],
     '2': [Function: parserOnBody],
     '3': [Function: parserOnMessageComplete],
     '4': [Function: onParserExecute],
     _headers: [],
     _url: '',
     _consumed: true,
     socket: [Circular],
     incoming: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { connection: 'upgrade',
           'x-forwarded-for': '127.0.0.1',
           host: 'wx1.z.cc',
           'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'accept-language': 'en-US,en;q=0.5',
           'accept-encoding': 'gzip, deflate',
           'upgrade-insecure-requests': '1',
           'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
        rawHeaders: 
         [ 'Connection',
           'upgrade',
           'X-Forwarded-For',
           '127.0.0.1',
           'Host',
           'wx1.z.cc',
           'User-Agent',
           'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           'Accept',
           'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'Accept-Language',
           'en-US,en;q=0.5',
           'Accept-Encoding',
           'gzip, deflate',
           'Upgrade-Insecure-Requests',
           '1',
           'If-None-Match',
           'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/',
        _parsedUrl: 
         Url {
           protocol: null,
           slashes: null,
           auth: null,
           host: null,
           port: null,
           hostname: null,
           hash: null,
           search: null,
           query: null,
           pathname: '/',
           path: '/',
           href: '/',
           _raw: '/' },
        params: {},
        query: {},
        res: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedHeader: { 'content-length': true, 'transfer-encoding': true },
           _contentLength: 0,
           _hasBody: false,
           _trailer: '',
           finished: true,
           _headerSent: true,
           socket: [Circular],
           connection: [Circular],
           _header: 'HTTP/1.1 304 Not Modified\r\nX-Powered-By: Express\r\nETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"\r\nDate: Sun, 27 Nov 2016 10:13:10 GMT\r\nConnection: keep-alive\r\n\r\n',
           _headers: 
            { 'x-powered-by': 'Express',
              etag: 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
           _headerNames: { 'x-powered-by': 'X-Powered-By', etag: 'ETag' },
           _onPendingData: [Function: updateOutgoingData],
           req: [Circular],
           locals: {},
           statusCode: 304,
           statusMessage: 'Not Modified' },
        route: 
         Route {
           path: '/',
           stack: 
            [ Layer {
                handle: [Function],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i,
                method: 'get' } ],
           methods: { get: true } } },
     outgoing: null,
     maxHeaderPairs: 2000,
     onIncoming: [Function: parserOnIncoming] },
  on: [Function: socketOnWrap],
  _paused: false,
  read: [Function],
  _consuming: true,
  _httpMessage: 
   ServerResponse {
     domain: null,
     _events: { finish: [Function: resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: { 'content-length': true, 'transfer-encoding': true },
     _contentLength: 0,
     _hasBody: false,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket: [Circular],
     connection: [Circular],
     _header: 'HTTP/1.1 304 Not Modified\r\nX-Powered-By: Express\r\nETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"\r\nDate: Sun, 27 Nov 2016 10:13:10 GMT\r\nConnection: keep-alive\r\n\r\n',
     _headers: 
      { 'x-powered-by': 'Express',
        etag: 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
     _headerNames: { 'x-powered-by': 'X-Powered-By', etag: 'ETag' },
     _onPendingData: [Function: updateOutgoingData],
     req: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { connection: 'upgrade',
           'x-forwarded-for': '127.0.0.1',
           host: 'wx1.z.cc',
           'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'accept-language': 'en-US,en;q=0.5',
           'accept-encoding': 'gzip, deflate',
           'upgrade-insecure-requests': '1',
           'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
        rawHeaders: 
         [ 'Connection',
           'upgrade',
           'X-Forwarded-For',
           '127.0.0.1',
           'Host',
           'wx1.z.cc',
           'User-Agent',
           'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           'Accept',
           'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'Accept-Language',
           'en-US,en;q=0.5',
           'Accept-Encoding',
           'gzip, deflate',
           'Upgrade-Insecure-Requests',
           '1',
           'If-None-Match',
           'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/',
        _parsedUrl: 
         Url {
           protocol: null,
           slashes: null,
           auth: null,
           host: null,
           port: null,
           hostname: null,
           hash: null,
           search: null,
           query: null,
           pathname: '/',
           path: '/',
           href: '/',
           _raw: '/' },
        params: {},
        query: {},
        res: [Circular],
        route: 
         Route {
           path: '/',
           stack: 
            [ Layer {
                handle: [Function],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i,
                method: 'get' } ],
           methods: { get: true } } },
     locals: {},
     statusCode: 304,
     statusMessage: 'Not Modified' } }


<br/>
httpVersionMajor:<br/>
 1


<br/>
httpVersionMinor:<br/>
 1


<br/>
httpVersion:<br/>
 '1.1'


<br/>
complete:<br/>
 false


<br/>
headers:<br/>
 { connection: 'upgrade',
  'x-forwarded-for': '127.0.0.1',
  host: 'wx1.z.cc',
  'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'accept-language': 'en-US,en;q=0.5',
  'accept-encoding': 'gzip, deflate',
  'upgrade-insecure-requests': '1',
  'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' }


<br/>
rawHeaders:<br/>
 [ 'Connection',
  'upgrade',
  'X-Forwarded-For',
  '127.0.0.1',
  'Host',
  'wx1.z.cc',
  'User-Agent',
  'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
  'Accept',
  'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'Accept-Language',
  'en-US,en;q=0.5',
  'Accept-Encoding',
  'gzip, deflate',
  'Upgrade-Insecure-Requests',
  '1',
  'If-None-Match',
  'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ]


<br/>
trailers:<br/>
 {}


<br/>
rawTrailers:<br/>
 []


<br/>
upgrade:<br/>
 false


<br/>
url:<br/>
 '/'


<br/>
method:<br/>
 'GET'


<br/>
statusCode:<br/>
 null


<br/>
statusMessage:<br/>
 null


<br/>
client:<br/>
 Socket {
  connecting: false,
  _hadError: false,
  _handle: 
   TCP {
     bytesRead: 386,
     _externalStream: {},
     fd: 13,
     reading: true,
     owner: [Circular],
     onread: [Function: onread],
     onconnection: null,
     writeQueueSize: 0 },
  _parent: null,
  _host: null,
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: 
   { end: 
      [ { [Function: g] listener: [Function: onend] },
        [Function: socketOnEnd] ],
     finish: [Function: onSocketFinish],
     _socketEnd: [Function: onSocketEnd],
     drain: [ [Function: ondrain], [Function: socketOnDrain] ],
     timeout: [Function],
     error: [Function: socketOnError],
     close: 
      [ [Function: serverSocketCloseListener],
        [Function: onServerResponseClose] ],
     data: [Function: socketOnData],
     resume: [Function: onSocketResume],
     pause: [Function: onSocketPause] },
  _eventsCount: 10,
  _maxListeners: undefined,
  _writableState: 
   WritableState {
     objectMode: false,
     highWaterMark: 16384,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     corked: 0,
     sync: false,
     bufferProcessing: false,
     onwrite: [Function],
     writecb: null,
     writelen: 0,
     bufferedRequest: null,
     lastBufferedRequest: null,
     pendingcb: 1,
     prefinished: false,
     errorEmitted: false,
     bufferedRequestCount: 0,
     corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
  writable: true,
  allowHalfOpen: true,
  destroyed: false,
  _bytesDispatched: 149,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: 
   Server {
     domain: null,
     _events: 
      { request: 
         { [Function: app]
           domain: undefined,
           _events: { mount: [Function: onmount] },
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames],
           init: [Function: init],
           defaultConfiguration: [Function: defaultConfiguration],
           lazyrouter: [Function: lazyrouter],
           handle: [Function: handle],
           use: [Function: use],
           route: [Function: route],
           engine: [Function: engine],
           param: [Function: param],
           set: [Function: set],
           path: [Function: path],
           enabled: [Function: enabled],
           disabled: [Function: disabled],
           enable: [Function: enable],
           disable: [Function: disable],
           acl: [Function],
           bind: [Function],
           checkout: [Function],
           connect: [Function],
           copy: [Function],
           delete: [Function],
           get: [Function],
           head: [Function],
           link: [Function],
           lock: [Function],
           'm-search': [Function],
           merge: [Function],
           mkactivity: [Function],
           mkcalendar: [Function],
           mkcol: [Function],
           move: [Function],
           notify: [Function],
           options: [Function],
           patch: [Function],
           post: [Function],
           propfind: [Function],
           proppatch: [Function],
           purge: [Function],
           put: [Function],
           rebind: [Function],
           report: [Function],
           search: [Function],
           subscribe: [Function],
           trace: [Function],
           unbind: [Function],
           unlink: [Function],
           unlock: [Function],
           unsubscribe: [Function],
           all: [Function: all],
           del: [Function],
           render: [Function: render],
           listen: [Function: listen],
           request: IncomingMessage { app: [Circular] },
           response: ServerResponse { app: [Circular] },
           cache: {},
           engines: {},
           settings: 
            { 'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: wetag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/iamchenxin/project/workout/wxtest/views',
              'jsonp callback name': 'callback' },
           _eventsCount: 1,
           locals: 
            { settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' } },
           mountpath: '/',
           _router: 
            { [Function: router]
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: 
               [ Layer {
                   handle: [Function: query],
                   name: 'query',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: expressInit],
                   name: 'expressInit',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: {},
                   path: '/',
                   keys: [],
                   regexp: /^\/?$/i,
                   route: 
                    Route {
                      path: '/',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/log\/?$/i,
                   route: 
                    Route {
                      path: '/log',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } } ] } },
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle: 
      TCP {
        bytesRead: 0,
        _externalStream: {},
        fd: 11,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _pendingResponseData: 0,
     _connectionKey: '6::::18801' },
  _server: 
   Server {
     domain: null,
     _events: 
      { request: 
         { [Function: app]
           domain: undefined,
           _events: { mount: [Function: onmount] },
           _maxListeners: undefined,
           setMaxListeners: [Function: setMaxListeners],
           getMaxListeners: [Function: getMaxListeners],
           emit: [Function: emit],
           addListener: [Function: addListener],
           on: [Function: addListener],
           prependListener: [Function: prependListener],
           once: [Function: once],
           prependOnceListener: [Function: prependOnceListener],
           removeListener: [Function: removeListener],
           removeAllListeners: [Function: removeAllListeners],
           listeners: [Function: listeners],
           listenerCount: [Function: listenerCount],
           eventNames: [Function: eventNames],
           init: [Function: init],
           defaultConfiguration: [Function: defaultConfiguration],
           lazyrouter: [Function: lazyrouter],
           handle: [Function: handle],
           use: [Function: use],
           route: [Function: route],
           engine: [Function: engine],
           param: [Function: param],
           set: [Function: set],
           path: [Function: path],
           enabled: [Function: enabled],
           disabled: [Function: disabled],
           enable: [Function: enable],
           disable: [Function: disable],
           acl: [Function],
           bind: [Function],
           checkout: [Function],
           connect: [Function],
           copy: [Function],
           delete: [Function],
           get: [Function],
           head: [Function],
           link: [Function],
           lock: [Function],
           'm-search': [Function],
           merge: [Function],
           mkactivity: [Function],
           mkcalendar: [Function],
           mkcol: [Function],
           move: [Function],
           notify: [Function],
           options: [Function],
           patch: [Function],
           post: [Function],
           propfind: [Function],
           proppatch: [Function],
           purge: [Function],
           put: [Function],
           rebind: [Function],
           report: [Function],
           search: [Function],
           subscribe: [Function],
           trace: [Function],
           unbind: [Function],
           unlink: [Function],
           unlock: [Function],
           unsubscribe: [Function],
           all: [Function: all],
           del: [Function],
           render: [Function: render],
           listen: [Function: listen],
           request: IncomingMessage { app: [Circular] },
           response: ServerResponse { app: [Circular] },
           cache: {},
           engines: {},
           settings: 
            { 'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: wetag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/iamchenxin/project/workout/wxtest/views',
              'jsonp callback name': 'callback' },
           _eventsCount: 1,
           locals: 
            { settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' } },
           mountpath: '/',
           _router: 
            { [Function: router]
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: 
               [ Layer {
                   handle: [Function: query],
                   name: 'query',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: expressInit],
                   name: 'expressInit',
                   params: {},
                   path: '',
                   keys: [],
                   regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                   route: undefined },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: {},
                   path: '/',
                   keys: [],
                   regexp: /^\/?$/i,
                   route: 
                    Route {
                      path: '/',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } },
                 Layer {
                   handle: [Function: bound dispatch],
                   name: 'bound dispatch',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/log\/?$/i,
                   route: 
                    Route {
                      path: '/log',
                      stack: 
                       [ Layer {
                           handle: [Function],
                           name: '<anonymous>',
                           params: undefined,
                           path: undefined,
                           keys: [],
                           regexp: /^\/?$/i,
                           method: 'get' } ],
                      methods: { get: true } } } ] } },
        connection: [Function: connectionListener] },
     _eventsCount: 2,
     _maxListeners: undefined,
     _connections: 1,
     _handle: 
      TCP {
        bytesRead: 0,
        _externalStream: {},
        fd: 11,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _pendingResponseData: 0,
     _connectionKey: '6::::18801' },
  _idleTimeout: 120000,
  _idleNext: 
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000 },
  _idlePrev: 
   TimersList {
     _idleNext: [Circular],
     _idlePrev: [Circular],
     _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
     _unrefed: true,
     msecs: 120000 },
  _idleStart: 4116,
  parser: 
   HTTPParser {
     '0': [Function: parserOnHeaders],
     '1': [Function: parserOnHeadersComplete],
     '2': [Function: parserOnBody],
     '3': [Function: parserOnMessageComplete],
     '4': [Function: onParserExecute],
     _headers: [],
     _url: '',
     _consumed: true,
     socket: [Circular],
     incoming: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { connection: 'upgrade',
           'x-forwarded-for': '127.0.0.1',
           host: 'wx1.z.cc',
           'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'accept-language': 'en-US,en;q=0.5',
           'accept-encoding': 'gzip, deflate',
           'upgrade-insecure-requests': '1',
           'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
        rawHeaders: 
         [ 'Connection',
           'upgrade',
           'X-Forwarded-For',
           '127.0.0.1',
           'Host',
           'wx1.z.cc',
           'User-Agent',
           'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           'Accept',
           'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'Accept-Language',
           'en-US,en;q=0.5',
           'Accept-Encoding',
           'gzip, deflate',
           'Upgrade-Insecure-Requests',
           '1',
           'If-None-Match',
           'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/',
        _parsedUrl: 
         Url {
           protocol: null,
           slashes: null,
           auth: null,
           host: null,
           port: null,
           hostname: null,
           hash: null,
           search: null,
           query: null,
           pathname: '/',
           path: '/',
           href: '/',
           _raw: '/' },
        params: {},
        query: {},
        res: 
         ServerResponse {
           domain: null,
           _events: { finish: [Function: resOnFinish] },
           _eventsCount: 1,
           _maxListeners: undefined,
           output: [],
           outputEncodings: [],
           outputCallbacks: [],
           outputSize: 0,
           writable: true,
           _last: false,
           upgrading: false,
           chunkedEncoding: false,
           shouldKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedHeader: { 'content-length': true, 'transfer-encoding': true },
           _contentLength: 0,
           _hasBody: false,
           _trailer: '',
           finished: true,
           _headerSent: true,
           socket: [Circular],
           connection: [Circular],
           _header: 'HTTP/1.1 304 Not Modified\r\nX-Powered-By: Express\r\nETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"\r\nDate: Sun, 27 Nov 2016 10:13:10 GMT\r\nConnection: keep-alive\r\n\r\n',
           _headers: 
            { 'x-powered-by': 'Express',
              etag: 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
           _headerNames: { 'x-powered-by': 'X-Powered-By', etag: 'ETag' },
           _onPendingData: [Function: updateOutgoingData],
           req: [Circular],
           locals: {},
           statusCode: 304,
           statusMessage: 'Not Modified' },
        route: 
         Route {
           path: '/',
           stack: 
            [ Layer {
                handle: [Function],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i,
                method: 'get' } ],
           methods: { get: true } } },
     outgoing: null,
     maxHeaderPairs: 2000,
     onIncoming: [Function: parserOnIncoming] },
  on: [Function: socketOnWrap],
  _paused: false,
  read: [Function],
  _consuming: true,
  _httpMessage: 
   ServerResponse {
     domain: null,
     _events: { finish: [Function: resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: { 'content-length': true, 'transfer-encoding': true },
     _contentLength: 0,
     _hasBody: false,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket: [Circular],
     connection: [Circular],
     _header: 'HTTP/1.1 304 Not Modified\r\nX-Powered-By: Express\r\nETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"\r\nDate: Sun, 27 Nov 2016 10:13:10 GMT\r\nConnection: keep-alive\r\n\r\n',
     _headers: 
      { 'x-powered-by': 'Express',
        etag: 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
     _headerNames: { 'x-powered-by': 'X-Powered-By', etag: 'ETag' },
     _onPendingData: [Function: updateOutgoingData],
     req: 
      IncomingMessage {
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: false,
           sync: true,
           needReadable: false,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: true,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Circular],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: false,
        headers: 
         { connection: 'upgrade',
           'x-forwarded-for': '127.0.0.1',
           host: 'wx1.z.cc',
           'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'accept-language': 'en-US,en;q=0.5',
           'accept-encoding': 'gzip, deflate',
           'upgrade-insecure-requests': '1',
           'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
        rawHeaders: 
         [ 'Connection',
           'upgrade',
           'X-Forwarded-For',
           '127.0.0.1',
           'Host',
           'wx1.z.cc',
           'User-Agent',
           'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
           'Accept',
           'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
           'Accept-Language',
           'en-US,en;q=0.5',
           'Accept-Encoding',
           'gzip, deflate',
           'Upgrade-Insecure-Requests',
           '1',
           'If-None-Match',
           'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/',
        _parsedUrl: 
         Url {
           protocol: null,
           slashes: null,
           auth: null,
           host: null,
           port: null,
           hostname: null,
           hash: null,
           search: null,
           query: null,
           pathname: '/',
           path: '/',
           href: '/',
           _raw: '/' },
        params: {},
        query: {},
        res: [Circular],
        route: 
         Route {
           path: '/',
           stack: 
            [ Layer {
                handle: [Function],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i,
                method: 'get' } ],
           methods: { get: true } } },
     locals: {},
     statusCode: 304,
     statusMessage: 'Not Modified' } }


<br/>
_consuming:<br/>
 false


<br/>
_dumped:<br/>
 false


<br/>
next:<br/>
 [Function: next]


<br/>
baseUrl:<br/>
 ''


<br/>
originalUrl:<br/>
 '/'


<br/>
_parsedUrl:<br/>
 Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: null,
  query: null,
  pathname: '/',
  path: '/',
  href: '/',
  _raw: '/' }


<br/>
params:<br/>
 {}


<br/>
query:<br/>
 {}


<br/>
res:<br/>
 ServerResponse {
  domain: null,
  _events: { finish: [Function: resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  output: [],
  outputEncodings: [],
  outputCallbacks: [],
  outputSize: 0,
  writable: true,
  _last: false,
  upgrading: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedHeader: { 'content-length': true, 'transfer-encoding': true },
  _contentLength: 0,
  _hasBody: false,
  _trailer: '',
  finished: true,
  _headerSent: true,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 386,
        _externalStream: {},
        fd: 13,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g] listener: [Function: onend] },
           [Function: socketOnEnd] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [ [Function: ondrain], [Function: socketOnDrain] ],
        timeout: [Function],
        error: [Function: socketOnError],
        close: 
         [ [Function: serverSocketCloseListener],
           [Function: onServerResponseClose] ],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 149,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              domain: undefined,
              _events: { mount: [Function: onmount] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' },
              _eventsCount: 1,
              locals: 
               { settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router: 
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack: 
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/',
                      keys: [],
                      regexp: /^\/?$/i,
                      route: 
                       Route {
                         path: '/',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/log\/?$/i,
                      route: 
                       Route {
                         path: '/log',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::18801' },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              domain: undefined,
              _events: { mount: [Function: onmount] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' },
              _eventsCount: 1,
              locals: 
               { settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router: 
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack: 
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/',
                      keys: [],
                      regexp: /^\/?$/i,
                      route: 
                       Route {
                         path: '/',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/log\/?$/i,
                      route: 
                       Route {
                         path: '/log',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::18801' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4116,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: 
         IncomingMessage {
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: false,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: true,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           socket: [Circular],
           connection: [Circular],
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: false,
           headers: 
            { connection: 'upgrade',
              'x-forwarded-for': '127.0.0.1',
              host: 'wx1.z.cc',
              'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
              accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'accept-language': 'en-US,en;q=0.5',
              'accept-encoding': 'gzip, deflate',
              'upgrade-insecure-requests': '1',
              'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
           rawHeaders: 
            [ 'Connection',
              'upgrade',
              'X-Forwarded-For',
              '127.0.0.1',
              'Host',
              'wx1.z.cc',
              'User-Agent',
              'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
              'Accept',
              'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'Accept-Language',
              'en-US,en;q=0.5',
              'Accept-Encoding',
              'gzip, deflate',
              'Upgrade-Insecure-Requests',
              '1',
              'If-None-Match',
              'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
           trailers: {},
           rawTrailers: [],
           upgrade: false,
           url: '/',
           method: 'GET',
           statusCode: null,
           statusMessage: null,
           client: [Circular],
           _consuming: false,
           _dumped: false,
           next: [Function: next],
           baseUrl: '',
           originalUrl: '/',
           _parsedUrl: 
            Url {
              protocol: null,
              slashes: null,
              auth: null,
              host: null,
              port: null,
              hostname: null,
              hash: null,
              search: null,
              query: null,
              pathname: '/',
              path: '/',
              href: '/',
              _raw: '/' },
           params: {},
           query: {},
           res: [Circular],
           route: 
            Route {
              path: '/',
              stack: 
               [ Layer {
                   handle: [Function],
                   name: '<anonymous>',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/?$/i,
                   method: 'get' } ],
              methods: { get: true } } },
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular] },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 386,
        _externalStream: {},
        fd: 13,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g] listener: [Function: onend] },
           [Function: socketOnEnd] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [ [Function: ondrain], [Function: socketOnDrain] ],
        timeout: [Function],
        error: [Function: socketOnError],
        close: 
         [ [Function: serverSocketCloseListener],
           [Function: onServerResponseClose] ],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 149,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              domain: undefined,
              _events: { mount: [Function: onmount] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' },
              _eventsCount: 1,
              locals: 
               { settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router: 
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack: 
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/',
                      keys: [],
                      regexp: /^\/?$/i,
                      route: 
                       Route {
                         path: '/',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/log\/?$/i,
                      route: 
                       Route {
                         path: '/log',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::18801' },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              domain: undefined,
              _events: { mount: [Function: onmount] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/home/iamchenxin/project/workout/wxtest/views',
                 'jsonp callback name': 'callback' },
              _eventsCount: 1,
              locals: 
               { settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router: 
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack: 
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/',
                      keys: [],
                      regexp: /^\/?$/i,
                      route: 
                       Route {
                         path: '/',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/log\/?$/i,
                      route: 
                       Route {
                         path: '/log',
                         stack: 
                          [ Layer {
                              handle: [Function],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i,
                              method: 'get' } ],
                         methods: { get: true } } } ] } },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::18801' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4116,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: 
         IncomingMessage {
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: false,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: true,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: {},
           _eventsCount: 0,
           _maxListeners: undefined,
           socket: [Circular],
           connection: [Circular],
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: false,
           headers: 
            { connection: 'upgrade',
              'x-forwarded-for': '127.0.0.1',
              host: 'wx1.z.cc',
              'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
              accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'accept-language': 'en-US,en;q=0.5',
              'accept-encoding': 'gzip, deflate',
              'upgrade-insecure-requests': '1',
              'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
           rawHeaders: 
            [ 'Connection',
              'upgrade',
              'X-Forwarded-For',
              '127.0.0.1',
              'Host',
              'wx1.z.cc',
              'User-Agent',
              'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
              'Accept',
              'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'Accept-Language',
              'en-US,en;q=0.5',
              'Accept-Encoding',
              'gzip, deflate',
              'Upgrade-Insecure-Requests',
              '1',
              'If-None-Match',
              'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
           trailers: {},
           rawTrailers: [],
           upgrade: false,
           url: '/',
           method: 'GET',
           statusCode: null,
           statusMessage: null,
           client: [Circular],
           _consuming: false,
           _dumped: false,
           next: [Function: next],
           baseUrl: '',
           originalUrl: '/',
           _parsedUrl: 
            Url {
              protocol: null,
              slashes: null,
              auth: null,
              host: null,
              port: null,
              hostname: null,
              hash: null,
              search: null,
              query: null,
              pathname: '/',
              path: '/',
              href: '/',
              _raw: '/' },
           params: {},
           query: {},
           res: [Circular],
           route: 
            Route {
              path: '/',
              stack: 
               [ Layer {
                   handle: [Function],
                   name: '<anonymous>',
                   params: undefined,
                   path: undefined,
                   keys: [],
                   regexp: /^\/?$/i,
                   method: 'get' } ],
              methods: { get: true } } },
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: [Circular] },
  _header: 'HTTP/1.1 304 Not Modified\r\nX-Powered-By: Express\r\nETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"\r\nDate: Sun, 27 Nov 2016 10:13:10 GMT\r\nConnection: keep-alive\r\n\r\n',
  _headers: 
   { 'x-powered-by': 'Express',
     etag: 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
  _headerNames: { 'x-powered-by': 'X-Powered-By', etag: 'ETag' },
  _onPendingData: [Function: updateOutgoingData],
  req: 
   IncomingMessage {
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: true,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           bytesRead: 386,
           _externalStream: {},
           fd: 13,
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0 },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: g] listener: [Function: onend] },
              [Function: socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: [Function: socketOnError],
           close: 
            [ [Function: serverSocketCloseListener],
              [Function: onServerResponseClose] ],
           data: [Function: socketOnData],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        _bytesDispatched: 149,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/iamchenxin/project/workout/wxtest/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/',
                         keys: [],
                         regexp: /^\/?$/i,
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/log\/?$/i,
                         route: 
                          Route {
                            path: '/log',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::18801' },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/iamchenxin/project/workout/wxtest/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/',
                         keys: [],
                         regexp: /^\/?$/i,
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/log\/?$/i,
                         route: 
                          Route {
                            path: '/log',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::18801' },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000 },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000 },
        _idleStart: 4116,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           bytesRead: 386,
           _externalStream: {},
           fd: 13,
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0 },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: g] listener: [Function: onend] },
              [Function: socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: [Function: socketOnError],
           close: 
            [ [Function: serverSocketCloseListener],
              [Function: onServerResponseClose] ],
           data: [Function: socketOnData],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        _bytesDispatched: 149,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/iamchenxin/project/workout/wxtest/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/',
                         keys: [],
                         regexp: /^\/?$/i,
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/log\/?$/i,
                         route: 
                          Route {
                            path: '/log',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::18801' },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/iamchenxin/project/workout/wxtest/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/',
                         keys: [],
                         regexp: /^\/?$/i,
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/log\/?$/i,
                         route: 
                          Route {
                            path: '/log',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::18801' },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000 },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000 },
        _idleStart: 4116,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: false,
     headers: 
      { connection: 'upgrade',
        'x-forwarded-for': '127.0.0.1',
        host: 'wx1.z.cc',
        'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
        accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'accept-encoding': 'gzip, deflate',
        'upgrade-insecure-requests': '1',
        'if-none-match': 'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' },
     rawHeaders: 
      [ 'Connection',
        'upgrade',
        'X-Forwarded-For',
        '127.0.0.1',
        'Host',
        'wx1.z.cc',
        'User-Agent',
        'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0',
        'Accept',
        'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language',
        'en-US,en;q=0.5',
        'Accept-Encoding',
        'gzip, deflate',
        'Upgrade-Insecure-Requests',
        '1',
        'If-None-Match',
        'W/"c-7Qdih1MuhjZehB6Sv8UNjA"' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '/',
     method: 'GET',
     statusCode: null,
     statusMessage: null,
     client: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           bytesRead: 386,
           _externalStream: {},
           fd: 13,
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0 },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: g] listener: [Function: onend] },
              [Function: socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: [Function: socketOnError],
           close: 
            [ [Function: serverSocketCloseListener],
              [Function: onServerResponseClose] ],
           data: [Function: socketOnData],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        _bytesDispatched: 149,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/iamchenxin/project/workout/wxtest/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/',
                         keys: [],
                         regexp: /^\/?$/i,
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/log\/?$/i,
                         route: 
                          Route {
                            path: '/log',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::18801' },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/home/iamchenxin/project/workout/wxtest/views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/home/iamchenxin/project/workout/wxtest/views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: {},
                         path: '/',
                         keys: [],
                         regexp: /^\/?$/i,
                         route: 
                          Route {
                            path: '/',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } },
                       Layer {
                         handle: [Function: bound dispatch],
                         name: 'bound dispatch',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/log\/?$/i,
                         route: 
                          Route {
                            path: '/log',
                            stack: 
                             [ Layer {
                                 handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } } ] } },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::18801' },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000 },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000 },
        _idleStart: 4116,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _consuming: false,
     _dumped: false,
     next: [Function: next],
     baseUrl: '',
     originalUrl: '/',
     _parsedUrl: 
      Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/',
        path: '/',
        href: '/',
        _raw: '/' },
     params: {},
     query: {},
     res: [Circular],
     route: 
      Route {
        path: '/',
        stack: 
         [ Layer {
             handle: [Function],
             name: '<anonymous>',
             params: undefined,
             path: undefined,
             keys: [],
             regexp: /^\/?$/i,
             method: 'get' } ],
        methods: { get: true } } },
  locals: {},
  statusCode: 304,
  statusMessage: 'Not Modified' }


<br/>
route:<br/>
 Route {
  path: '/',
  stack: 
   [ Layer {
       handle: [Function],
       name: '<anonymous>',
       params: undefined,
       path: undefined,
       keys: [],
       regexp: /^\/?$/i,
       method: 'get' } ],
  methods: { get: true } }



